게임 엔진이란 : 편하게 게임 만드는거?
cocos2d-x <--API

--> 1 라이브러리에 집합체 Ex)언리얼3,크라이
기능은 많은데 사람이 제대로 못쓰면...
--> 2 라이브러리 + Tool (유니티,언리얼4)

유니티 --> 4인 이하의 소규모 팀에서 편하고 쉽게 게임을 만들자란 모토
객체지향을 완벽하게 무너뜨리는 엔진

PC MMORPG --> 모바일 게임 시장

언리얼3 --> 냅둬도 잘팔림
크라이 --> PC에만 집중함
유니티 --> 모바일

유니티
1. 다중 플랫폼 포팅 가능
2. Tool제공을 쉽고 편안하게 제작가능

게임프로그래밍 --> 수학과 물리로 귀결됨 --> 그래픽 프로그래밍

그래픽 프로그래밍의 양대산맥
OpenGL Vs DirectX
  오른손        왼손
     TRS           SRT

T --> Transform  이동
R --> Roate          회전
S --> Scale            ?

초반의 강자는?
OpenGL --> 모든 그래픽 프로그래밍 플랫폼에 사용가능
Ex) 병원 수술 기계 / 온도계 ..... 모든 전자장비에 거의 가능

DirectX --> 윈도우 플랫폼에서만 가능
PC게임 --> 훼이크,둠  <-- 2분할 충돌법 존 카맥
더더더 많은 기능 --> 다이렉트 (Nvidia/AMD)

윈도우XP --> 윈도우 vista   --> 윈도우7
directX9.0  -->   directX10   --> directX11 --> 12

유니티의 단점 : Secne View는 DirectX,gameView 는 OpenGL

유니티 -->언리얼 모방
언리얼 --> 유니티 모방
둘이 비슷

무적권 면접질문에 나옴
DirectX --> 렌더링 파이프 라인 --> 컨테이너 벨트를 생각(역할분담 나눠서)
가상의 공간이 우리 눈에 들어오기까지의 모든 공정(꼭 외워야 함)

1. 로컬 스페이스 -->디자이너 영역 0,0,0의 절대좌표를 가짐
실제로 여기에 그려지는 것들은 크다

2. 월드 스페이스 --> 가상의 3D 공간을 만듬 다이렉트 기반이면 SRT
                                                                          OpenGL 기반이면 TRS
3. 뷰 스페이스 --> 카메라 --> 가상의 3D공가넹 배치된 오브젝트를 실제로 눈에
볼 수 있게 담아내는 작업 처리

4. 백스페이서 컬링(backspace cull) --> 후면 추려내기
(CW,CCW) 벡터의 외적 내적중 내적이 쓰임 (그냥 해줌)

5. 조명(light) 직사광,스팟라이트,스펙큘러(반사광),등등

6.클리핑 - 카메라 안데 들어오는것 이외에는 그리지 않는다.

7. 프로젝션(투영) - 크게 2개가 있다.
Perpective(원근 투영)
Orsograph(직교투영) 3D 에서 굳이 2D처럼 보이고 싶을때

8. 뷰포트 -> 드디어 이 모든 처리를 해서 2D모니터 화면으로 올려줌

9. 픽셀보간 -> (사실 이건 다이렉트를 하더라도 컴퓨터가 알아서 처리해줌)

이 모든 과정을 렌더링 파이프 라인이라고 함

======================================================
Vector(STL말고) --> 위치,크기
Vector 크게 3가지를 사용함
1. 덧셈 - 이동을 담당 (무적권 이동임 이동 이동이동) 0,0 -> 1,0

2. 뺄셈 - 이동 & 방향을 담당
(마름모방식,꼬리물기 방식)

3. 곱셈 - 이동,방향,각도
외적 (크로스 프로덕트) - A 와 B가 있을때 수직벡터가 나옴
벡터의 소숫값을 버리고 그냥 1로 둬버릴때 - 벡터의 노멀라이즈

내적 (닷 프로젝트) - A 와 B 내적을 구하면 무적권 -1 부터 1까지 나옴
1은 우리 눈에 보임(0은 희미?) -1은 안보임
벽을 볼때 벽앞은 1 뒷면은 -1
0 부터 -1부분까지 렌더하지 않음


VECTOR3(x,y,z)

렌더링 파이프 라인 과정에서 순차적으로 올때는 행렬을 이용
다시 역순으로 돌아갈때 역행렬 이용

다이렉트x 는 4*4 정방행렬을 써서 4번째 원소는 크기를 변경 아님 이동을 할지 판단
                        x * y * z * w
                        x * y * z * w
                        x * y * z * w
                        x * y * z * w 


렌더링 파이프라인 공부 꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !꼭 !
다이렉트 11에 들어와선 변함 이것도 공부                   







3D --> 2D 이 과정을 렌더링 파이프 라인






